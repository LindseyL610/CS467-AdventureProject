# parser: get input and identify parts:
# verb, dobj, prep, iobj.
# Check against *master* word list, which is generated by looking at
# all things, rooms, and verbs, and their alternate words. translate words to their common name.

# action:
# make sure verb has a use case with given "parts" (e.g. dobj, iobj)
# otherwise give general error feedback
# Look at words, make sure they are relevant (objects that are in inventory/current room and verbs that are known)
# (you can use room.get_all_accessible_contents() )
# make sure objects are in correct place (e.g. in inventory vs in room)

# look
# only verb
# dobj(any)

# look at
# dobj(any)

# go
# special

# read
# dobj(inventory/in room)

# take
# dobj(in room)

# drop
# dobj(inventory)

# put in
# dobj(inventory) + iobj(in room)

# put on
# dobj (inventory) + iobj(in room)
class Action():
    """This class defines the unique characteristics for specific actions."""

    def __init__(self, name):
        self.name = name
        # define use cases

    pass


# create acitons
look = Action("look")



